<?xml version="1.0" encoding="UTF-8"?>
<pythonPanelDocument>
  <!-- This file contains definitions of Python interfaces and the
 interfaces menu.  It should not be hand-edited when it is being
 used by the application.  Note, that two definitions of the
 same interface or of the interfaces menu are not allowed
 in a single file. -->
  <interface name="xx" label="xx" icon="MISC_python" showNetworkNavigationBar="false" help_url="">
    <script><![CDATA[import hou_ctrl_utils as hcu
import os
from PySide2 import QtCore, QtGui, QtWidgets
from fuzzyfinder import fuzzyfinder
       
class win(hou.qt.Window):
    def __init_(s, parent=hou.qt.mainWindow()):
        print("ss")
        x = 1
        
    def closeEvent(s, event):
        s.setParent(None)

class Dialog(QtWidgets.QFrame):
    def __init__(s, parent=None):
        super(Dialog, s).__init__(parent)
        
        s.input = QtWidgets.QLineEdit()
        s.input.textEdited.connect(s.fltr)
        
        s.buttons = []

        s.edit_hotkeys_b = QtWidgets.QPushButton("edit_hotkeys")
        s.edit_hotkeys_b.clicked.connect(s.edit_hotkeys)
        s.buttons.append("edit_hotkeys")
        
        s.hide_shelf_b = QtWidgets.QPushButton("hide_shelf")
        s.hide_shelf_b.clicked.connect(hcu.shelf_hide)
        s.buttons.append("hide_shelf")
        
        s.reload_color_schemes_b = QtWidgets.QPushButton("reload_color_schemes")
        s.reload_color_schemes_b.clicked.connect(hcu.color_scheme_reload)
        s.buttons.append("reload_color_schemes")
        
        s.show_shelf_b = QtWidgets.QPushButton("show_shelf")
        s.show_shelf_b.clicked.connect(hcu.shelf_show)
        s.buttons.append("show_shelf")
        
        s.toggle_main_menubar_b = QtWidgets.QPushButton("toggle_main_menubar")
        s.toggle_main_menubar_b.clicked.connect(hcu.menubar_toggle)
        s.buttons.append("toggle_main_menubar")        
        
        s.update_main_menubar_b = QtWidgets.QPushButton("update_main_menubar")
        s.update_main_menubar_b.clicked.connect(hcu.menubar_update)
        s.buttons.append("update_main_menubar")
        
        s.toggle_network_controls_b = QtWidgets.QPushButton("toggle_network_controls")
        s.toggle_network_controls_b.clicked.connect(hcu.network_ctrl_toggle)
        s.buttons.append("toggle_network_controls")
        
        s.toggle_network_menubar_b = QtWidgets.QPushButton("toggle_network_menubar")
        s.toggle_network_menubar_b.clicked.connect(hcu.network_menu_toggle)
        s.buttons.append("toggle_network_menubar")
        
        s.toggle_panetabs_b = QtWidgets.QPushButton("toggle_panetabs")
        s.toggle_panetabs_b.clicked.connect(hcu.tab_toggle)
        s.buttons.append("toggle_panetabs")        

        s.toggle_stowbars_b = QtWidgets.QPushButton("toggle_stowbars")
        s.toggle_stowbars_b.clicked.connect(hcu.stowbar_toggle)
        s.buttons.append("toggle_stowbars")
        
        s.trigger_update_b = QtWidgets.QPushButton("trigger_update")
        s.trigger_update_b.clicked.connect(hcu.update_trigger)
        s.buttons.append("trigger_update")
        
        s.toggle_viewer_toolbars_b = QtWidgets.QPushButton("toggle_viewer_toolbars")
        s.toggle_viewer_toolbars_b.clicked.connect(s.toggle_viewer_toolbars)
        s.buttons.append("toggle_viewer_toolbars")
        
        s.update_mode_auto_b = QtWidgets.QPushButton("update_mode_auto")
        s.update_mode_auto_b.clicked.connect(hcu.update_mode_auto)
        s.buttons.append("update_mode_auto")
        
        s.update_mode_manual_b = QtWidgets.QPushButton("update_mode_manual")
        s.update_mode_manual_b.clicked.connect(hcu.update_mode_manual)
        s.buttons.append("update_mode_manual")
        
        s.overlay_b = QtWidgets.QPushButton("overlay")
        s.overlay_b.clicked.connect(s.overlay)
        s.buttons.append("overlay")
        
        # layout
        s.layout0 = QtWidgets.QBoxLayout(QtWidgets.QBoxLayout.Direction.TopToBottom)
        s.layout0.addWidget(s.input)
        s.layout1 = QtWidgets.QBoxLayout(QtWidgets.QBoxLayout.Direction.TopToBottom)
        s.layout1.addWidget(s.edit_hotkeys_b)
        s.layout1.addWidget(s.hide_shelf_b)
        s.layout1.addWidget(s.show_shelf_b)
        s.layout1.addWidget(s.toggle_panetabs_b)
        s.layout1.addWidget(s.toggle_network_controls_b)
        s.layout1.addWidget(s.toggle_network_menubar_b)
        s.layout1.addWidget(s.toggle_main_menubar_b)
        s.layout1.addWidget(s.toggle_stowbars_b)
        s.layout1.addWidget(s.update_main_menubar_b)
        s.layout1.addWidget(s.reload_color_schemes_b)
        s.layout1.addWidget(s.trigger_update_b)
        s.layout1.addWidget(s.toggle_viewer_toolbars_b)
        s.layout1.addWidget(s.update_mode_auto_b)
        s.layout1.addWidget(s.update_mode_manual_b)
        s.layout1.addWidget(s.overlay_b)
        
        s.layout2 = QtWidgets.QBoxLayout(QtWidgets.QBoxLayout.Direction.TopToBottom)
        s.layout2.addLayout(s.layout0)
        s.layout2.addLayout(s.layout1)
        s.setLayout(s.layout2)
        
    def overlay(s):
        newwin = win()
        newwin.show()
        
    def fltr(s):
        text = s.input.text()
        suggestions = fuzzyfinder(text, s.buttons)
        suggestions = list(suggestions)
        s.hide_shelf_b.hide()
        # s.layout1 = QtWidgets.QBoxLayout(QtWidgets.QBoxLayout.Direction.TopToBottom)
        # s.layout1.addWidget(s.test_b)
        for button in s.buttons:
            widget = getattr(s, button + "_b")
            if button in suggestions:
                widget.show()
            else:
                widget.hide()
                
    def edit_hotkeys(s):
        print("x")
    
    def toggle_viewer_toolbars(s):
        viewer = hou.ui.paneTabOfType(hou.paneTabType.SceneViewer)
        operation_bar_state = viewer.isShowingOperationBar()
        display_options_bar_state = viewer.isShowingDisplayOptionsBar()
        selection_bar_state = viewer.isShowingSelectionBar()
        ct = operation_bar_state + display_options_bar_state + selection_bar_state
        if ct > 0:
            viewer.showOperationBar(0)
            viewer.showDisplayOptionsBar(0)
            viewer.showSelectionBar(0)
        else:
            viewer.showOperationBar(1)
            viewer.showDisplayOptionsBar(1)
            viewer.showSelectionBar(1)

            
def onCreateInterface():
    # Create the dialog to display and edit the color information.
    root = Dialog()
    return root
    

]]></script>
    <includeInToolbarMenu menu_position="204" create_separator="false"/>
    <help><![CDATA[]]></help>
  </interface>
</pythonPanelDocument>
